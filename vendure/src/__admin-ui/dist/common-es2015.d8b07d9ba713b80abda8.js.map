{"version":3,"mappings":"wHAEAA,SAAuB,EAcvBA,IARA,kBACA,cACAC,iBACAC,+BACAC,cACAD,iEAAoC,IACpCA,wCCZAF,SAAc,EAmBdA,IAbA,cACA,yBACAI,IACAC,oBACA,MACAC,MAGAA,gGCdO,iBACP,WACA,MACA,mCACAC,WAEA,UACA,2BAGA,QACAC,iBACAC,mBACAA,eAEAC,UACA,4DAGA,gBAAuCC,IACvCH,mBACAI,SACAH,mBACAA,eACAA,kBACA,iBACAA,yBACA,YAAwBI,IAASA,IACjCJ,uBAEA,YAAwBI,IAASA,KACjC,WACAJ,UAAqB,OAAiBA,mBAGtCK,kBACAL,iBACA,uBACA,eACA,sBACA,OACAM,eAIAC,kBAEAC,SACA,8BACA,2BACAR,aACAA,oBAGAA,0BAIAS,eACA,MACA,IACAX,mCAEAY,GAEA,YADAV,0BAGAA","names":["i","normalize","replace","toLowerCase","h","s","t","e","constructor","this","call","l","super","n","notifyNext","c","notifyComplete","_next","_tryProject","r"],"sources":["webpack:///node_modules/@vendure/common/lib/normalize-string.js","webpack:///node_modules/@vendure/common/lib/unique.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeString = void 0;\n/**\n * Normalizes a string to replace non-alphanumeric and diacritical marks with\n * plain equivalents.\n * Based on https://stackoverflow.com/a/37511463/772859\n */\nfunction normalizeString(input, spaceReplacer = ' ') {\n    return (input || '')\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .toLowerCase()\n        .replace(/[!\"£$%^&*()+[\\]{};:@#~?\\\\/,|><`¬'=‘’]/g, '')\n        .replace(/\\s+/g, spaceReplacer);\n}\nexports.normalizeString = normalizeString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unique = void 0;\n/**\n * Returns an array with only unique values. Objects are compared by reference,\n * unless the `byKey` argument is supplied, in which case matching properties will\n * be used to check duplicates\n */\nfunction unique(arr, byKey) {\n    return arr.filter((item, index, self) => {\n        return (index ===\n            self.findIndex(i => {\n                if (byKey === undefined) {\n                    return i === item;\n                }\n                else {\n                    return i[byKey] === item[byKey];\n                }\n            }));\n    });\n}\nexports.unique = unique;\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom(...args) {\n    return (source) => {\n        let project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        const observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nclass WithLatestFromOperator {\n    constructor(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    }\n}\nclass WithLatestFromSubscriber extends OuterSubscriber {\n    constructor(destination, observables, project) {\n        super(destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        const len = observables.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (let i = 0; i < len; i++) {\n            let observable = observables[i];\n            this.add(subscribeToResult(this, observable, undefined, i));\n        }\n    }\n    notifyNext(_outerValue, innerValue, outerIndex) {\n        this.values[outerIndex] = innerValue;\n        const toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            const found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    }\n    notifyComplete() {\n    }\n    _next(value) {\n        if (this.toRespond.length === 0) {\n            const args = [value, ...this.values];\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    }\n    _tryProject(args) {\n        let result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n"]}