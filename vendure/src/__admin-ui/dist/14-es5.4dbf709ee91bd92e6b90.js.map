{"version":3,"sources":["webpack:///src/extensions/61aa03f5e7fe5ea0996e6a8141107bbcf069eea135181d18c537e2570aca2d56/queries.ts","webpack:///src/extensions/61aa03f5e7fe5ea0996e6a8141107bbcf069eea135181d18c537e2570aca2d56/webhook.component.ts","webpack:///src/extensions/61aa03f5e7fe5ea0996e6a8141107bbcf069eea135181d18c537e2570aca2d56/webhook.component.html","webpack:///src/extensions/61aa03f5e7fe5ea0996e6a8141107bbcf069eea135181d18c537e2570aca2d56/webhook.module.ts"],"names":["updateWebhookMutation","getWebhookQuery","route","router","serverConfigService","formBuilder","dataService","changeDetector","notificationService","this","webhookForm","group","url","required","query","mapStream","d","webhook","subscribe","controls","setValue","console","log","value","dirty","formValue","mutate","toPromise","markAsPristine","markForCheck","success","entity","error","save","WebhookModule","id","label","routerLink","icon","forChild","path","pathMatch","component","data","breadcrumb"],"mappings":"ylBAEaA,EAAwB,IAAH,gGAMrBC,EAAkB,IAAH,uD,YCMf,E,WAGX,WACEC,EACAC,EACAC,EACQC,EACEC,EACFC,EACAC,aAHA,KAAAH,cACE,KAAAC,cACF,KAAAC,iBACA,KAAAC,sBAERC,KAAKC,YAAcD,KAAKJ,YAAYM,MAAM,CACxCC,IAAK,CAAC,sBAAuB,IAAWC,Y,+CAItC,W,qLACEJ,KAAKH,YACRQ,MAAMb,GACNc,UAAWC,YAAC,OAAUA,EAAEC,UACxBC,UAAWD,YAAO,OACjBR,EAAKC,YAAYS,SAAc,IAAEC,SAASH,K,kEAI1C,W,mKACJI,QAAQC,IAAI,UAAWb,KAAKC,YAAYa,MAAMX,K,UAExCH,KAAKC,YAAYc,M,gBACsB,OAAnCC,EAAYhB,KAAKC,YAAYa,M,SAC7Bd,KAAKH,YACRoB,OAAO1B,EAAuB,CAAEY,IAAKa,EAAUb,MAC/Ce,Y,OAELlB,KAAKC,YAAYkB,iBACjBnB,KAAKF,eAAesB,eACpBpB,KAAKD,oBAAoBsB,QAAQ,+BAAgC,CAC/DC,OAAQ,Y,gDAGVtB,KAAKD,oBAAoBwB,MAAM,6BAA8B,CAC3DD,OAAQ,Y,kIA1CH,GAAgB,0E,uBAAhB,EAAgB,uRCd7B,gBACI,gBACI,iBACI,oBACI,2BACI,kBAKJ,OACA,mBAEQ,+BAAS,EAAAE,SAGb,iBACJ,OACJ,OACJ,OACJ,OACJ,Q,MAnB2B,wCAYH,yE,qECoBXC,E,8DAAAA,I,uBAAAA,I,4BAbA,CACT,aACE,CACEC,GAAI,UACJC,MAAO,UACPC,WAAY,CAAC,uBACbC,KAAM,oBAER,aAEH,SArBQ,CACP,KACA,IAAaC,SAAS,CACpB,CACEC,KAAM,GACNC,UAAW,OACXC,UAAW,EACXC,KAAM,CAAEC,WAAY,sB","file":"x","sourcesContent":["import gql from 'graphql-tag';\n\nexport const updateWebhookMutation = gql`\n  mutation updateWebhook($url: String!) {\n    updateWebhook(url: $url)\n  }\n`;\n\nexport const getWebhookQuery = gql`\n  query webhook {\n    webhook\n  }\n`;\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  DataService,\n  NotificationService,\n  ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { getWebhookQuery, updateWebhookMutation } from './queries';\n\n@Component({\n  selector: 'greeter',\n  templateUrl: './webhook.component.html',\n})\nexport class WebhookComponent implements OnInit {\n  webhookForm: FormGroup;\n\n  constructor(\n    route: ActivatedRoute,\n    router: Router,\n    serverConfigService: ServerConfigService,\n    private formBuilder: FormBuilder,\n    protected dataService: DataService,\n    private changeDetector: ChangeDetectorRef,\n    private notificationService: NotificationService\n  ) {\n    this.webhookForm = this.formBuilder.group({\n      url: ['https://example.com', Validators.required],\n    });\n  }\n\n  async ngOnInit(): Promise<void> {\n    await this.dataService\n      .query(getWebhookQuery)\n      .mapStream((d: any) => d.webhook)\n      .subscribe((webhook) =>\n        this.webhookForm.controls['url'].setValue(webhook)\n      );\n  }\n\n  async save(): Promise<void> {\n    console.log('SAVEDDD', this.webhookForm.value.url);\n    try {\n      if (this.webhookForm.dirty) {\n        const formValue = this.webhookForm.value;\n        await this.dataService\n          .mutate(updateWebhookMutation, { url: formValue.url })\n          .toPromise();\n      }\n      this.webhookForm.markAsPristine();\n      this.changeDetector.markForCheck();\n      this.notificationService.success('common.notify-update-success', {\n        entity: 'Webhook',\n      });\n    } catch (e) {\n      this.notificationService.error('common.notify-update-error', {\n        entity: 'Webhook',\n      });\n    }\n  }\n}\n","<div class=\"clr-row\">\n    <div class=\"clr-col\">\n        <form class=\"form\" [formGroup]=\"webhookForm\">\n            <section class=\"form-block\">\n                <vdr-form-field label=\"Webhook url\" for=\"url\">\n                    <input\n                            id=\"url\"\n                            type=\"text\"\n                            formControlName=\"url\"\n                    />\n                </vdr-form-field>\n                <button\n                        class=\"btn btn-primary\"\n                        (click)=\"save()\"\n                        [disabled]=\"webhookForm.invalid || webhookForm.pristine\"\n                >\n                    Save\n                </button>\n            </section>\n        </form>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  addNavMenuItem,\n  addNavMenuSection,\n  SharedModule,\n} from '@vendure/admin-ui/core';\nimport { WebhookComponent } from './webhook.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: WebhookComponent,\n        data: { breadcrumb: 'Webhook' },\n      },\n    ]),\n  ],\n  providers: [\n    addNavMenuItem(\n      {\n        id: 'webhook',\n        label: 'Webhook',\n        routerLink: ['/extensions/webhook'],\n        icon: 'cursor-hand-open',\n      },\n      'settings'\n    ),\n  ],\n  declarations: [WebhookComponent],\n})\nexport class WebhookModule {}\n"]}