{"version":3,"sources":["webpack:///src/extensions/976b70229fecab22149a0954f083bb0a3715fb64926777f0756f44b44f9f2336/queries.ts","webpack:///src/extensions/976b70229fecab22149a0954f083bb0a3715fb64926777f0756f44b44f9f2336/webhook.component.ts","webpack:///src/extensions/976b70229fecab22149a0954f083bb0a3715fb64926777f0756f44b44f9f2336/webhook.component.html","webpack:///src/extensions/976b70229fecab22149a0954f083bb0a3715fb64926777f0756f44b44f9f2336/webhook.module.ts","webpack:///home/martijn/git/shops/node_modules/graphql-tag/src/index.js"],"names":["updateWebhookMutation","getWebhookQuery","route","router","serverConfigService","formBuilder","dataService","changeDetector","notificationService","this","webhookForm","group","url","required","query","mapStream","d","webhook","subscribe","controls","setValue","console","log","value","dirty","formValue","mutate","toPromise","markAsPristine","markForCheck","success","entity","error","save","WebhookModule","id","label","routerLink","icon","forChild","path","pathMatch","component","data","breadcrumb","parse","normalize","string","replace","trim","docCache","fragmentSourceMap","printFragmentWarnings","stripLoc","doc","removeLocAtThisLevel","docType","Object","prototype","toString","call","map","Error","loc","startToken","endToken","key","valueType","keys","hasOwnProperty","experimentalFragmentVariables","parseDocument","cacheKey","parsed","kind","ast","astFragmentMap","definitions","i","length","fragmentDefinition","fragmentName","name","sourceKey","source","body","substring","start","end","warn","push","gql","args","Array","slice","arguments","literals","result","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","module","exports"],"mappings":"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","file":"x","sourcesContent":["import gql from 'graphql-tag';\n\nexport const updateWebhookMutation = gql`\n  mutation updateWebhook($url: String!) {\n    updateWebhook(url: $url)\n  }\n`;\n\nexport const getWebhookQuery = gql`\n  query webhook {\n    webhook\n  }\n`;\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  DataService,\n  NotificationService,\n  ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { getWebhookQuery, updateWebhookMutation } from './queries';\n\n@Component({\n  selector: 'greeter',\n  templateUrl: './webhook.component.html',\n})\nexport class WebhookComponent implements OnInit {\n  webhookForm: FormGroup;\n\n  constructor(\n    route: ActivatedRoute,\n    router: Router,\n    serverConfigService: ServerConfigService,\n    private formBuilder: FormBuilder,\n    protected dataService: DataService,\n    private changeDetector: ChangeDetectorRef,\n    private notificationService: NotificationService\n  ) {\n    this.webhookForm = this.formBuilder.group({\n      url: ['https://example.com', Validators.required],\n    });\n  }\n\n  async ngOnInit(): Promise<void> {\n    await this.dataService\n      .query(getWebhookQuery)\n      .mapStream((d: any) => d.webhook)\n      .subscribe((webhook) =>\n        this.webhookForm.controls['url'].setValue(webhook)\n      );\n  }\n\n  async save(): Promise<void> {\n    console.log('SAVEDDD', this.webhookForm.value.url);\n    try {\n      if (this.webhookForm.dirty) {\n        const formValue = this.webhookForm.value;\n        await this.dataService\n          .mutate(updateWebhookMutation, { url: formValue.url })\n          .toPromise();\n      }\n      this.webhookForm.markAsPristine();\n      this.changeDetector.markForCheck();\n      this.notificationService.success('common.notify-update-success', {\n        entity: 'Webhook',\n      });\n    } catch (e) {\n      this.notificationService.error('common.notify-update-error', {\n        entity: 'Webhook',\n      });\n    }\n  }\n}\n","<div class=\"clr-row\">\n    <div class=\"clr-col\">\n        <form class=\"form\" [formGroup]=\"webhookForm\">\n            <section class=\"form-block\">\n                <vdr-form-field label=\"Webhook url\" for=\"url\">\n                    <input\n                            id=\"url\"\n                            type=\"text\"\n                            formControlName=\"url\"\n                    />\n                </vdr-form-field>\n                <button\n                        class=\"btn btn-primary\"\n                        (click)=\"save()\"\n                        [disabled]=\"webhookForm.invalid || webhookForm.pristine\"\n                >\n                    Save\n                </button>\n            </section>\n        </form>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  addNavMenuItem,\n  addNavMenuSection,\n  SharedModule,\n} from '@vendure/admin-ui/core';\nimport { WebhookComponent } from './webhook.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: WebhookComponent,\n        data: { breadcrumb: 'Webhook' },\n      },\n    ]),\n  ],\n  providers: [\n    addNavMenuItem(\n      {\n        id: 'webhook',\n        label: 'Webhook',\n        routerLink: ['/extensions/webhook'],\n        icon: 'cursor-hand-open',\n      },\n      'settings'\n    ),\n  ],\n  declarations: [WebhookComponent],\n})\nexport class WebhookModule {}\n","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n"]}