{"version":3,"mappings":"0nOAEaA,EAAuBC,KAAvBD,sLAUAE,EAAiBD,KAAjBC,2HAUAC,EAAsBF,KAAtBE,8WCQLC,iCACEA,qBACEA,kBACEA,4BACEA,gCACEA,mBAKFA,QACFA,QACAA,4BACEA,sBAMFA,QACAA,oBAEEA,0DAGAA,kBACFA,QACAA,qBAAkCA,kEAChCA,sBACFA,QACAA,gCAGFA,QACFA,QACFA,8BAjCuBA,mCAqBfA,4HA4CNA,iBAA8BA,SAA2BA,QACzDA,iBACEA,yBACFA,QACAA,iBAA8BA,SAA2BA,QACzDA,iBACEA,gBACEA,SACFA,QACFA,QACAA,kBACEA,iBACEA,wBACFA,QACFA,2BAd8BA,gCAE5BA,+CAE4BA,gCAEzBA,kDACDA,oCAICA,gDASRC,aAQLC,WACUC,EACEC,EACFC,EACAC,EACAC,wBAJAC,mBACEA,mBACFA,sBACAA,2BACAA,2BAVVA,kBAAe,GACfA,UAAO,EACPA,sBAA8B,GAwG9BA,gBAAcC,kBACZ,SAA8B,QAArBC,IAAKC,4BAAgBD,WAAEE,KAAMC,mBAAaA,EAASC,KAAOL,EAAIK,OA/FvEN,KAAKO,KAAOP,KAAKQ,YAAYC,MAAM,CACjCC,QAAS,CAAC,WACVC,eAAgB,CAAC,oBAEnBX,KAAKY,cAAaC,0CAGdC,8JACEd,KAAKe,YACRC,MAA0B1B,GAC1B2B,UAAWtB,mBAAMA,EAAEuB,gBACnBC,UAAWxB,YACVK,EAAKO,KAAKa,SAASV,QAAWW,SAAe,MAAN1B,WAAQe,SAC/CV,EAAKO,KAAKa,SAAST,eAAkBU,SAAe,MAAN1B,WAAQgB,kBANtDG,OAMsDH,OANtDG,SAQEd,KAAKsB,iBARPR,4EAWAQ,8JACEtB,KAAKe,YACRC,MAA6CzB,EAAqB,CACjEgC,MAAO,CACLC,KAAMxB,KAAKwB,KACXC,aAAczB,KAAKyB,gBAGtBR,UAAWtB,mBAAMA,EAAE+B,WACnBP,UAAWxB,YACVK,EAAK2B,aAAehC,IAVpB2B,kEAcAM,0JAEE5B,KAAKO,KAAKsB,MAFZD,gBAI6BhC,OADvBD,EAAYK,KAAKO,KAAKuB,MAH5BF,SAI8C5B,KAAKe,YAChDgB,OAGC3C,EAAsB,CACtBmC,MAAO,CACLb,QAASf,EAAUe,QACnBC,eAAgBhB,EAAUgB,kBAG7BqB,YAdHJ,gBAI6BhC,EAJ7BgC,EAIQK,oBAWRjC,KAAKO,KAAKa,SAASV,QAAWW,SAASzB,EAAOc,SAC9CV,KAAKO,KAAKa,SAAST,eAAkBU,SAASzB,EAAOe,gBAhBrDiB,OAkBF5B,KAAKO,KAAK2B,iBACVlC,KAAKmC,eAAeC,eACpBpC,KAAKqC,oBAAoBC,QAAQ,+BAAgC,CAC/DC,OAAQ,kBArBRX,kDAwBF5B,KAAKqC,oBAAoBG,MAAM,6BAA8B,CAC3DD,OAAQ,kBAzBRX,wFA8BAa,+IAGI7C,OAHJ6C,SAEI9C,EAAMK,KAAKG,iBAAiBuC,IAAK5C,mBAAMA,EAAE6C,gBAAeC,KAAK,KAFjEH,SAGgBI,gBACb7C,KAAKY,WADQiC,kCAC4BlD,GAC5C,CACEmD,QAAS9C,KAAK+C,eANhBN,WAGI7C,EAHJ6C,QASOO,GATPP,iBAUM3C,OAVN2C,SAUmB7C,EAAIqD,OAVvBR,aAUM3C,EAVN2C,OAWMS,MAAU,MAAJpD,WAAMqD,SAXlBV,QAaI5C,OAbJ4C,UAaiB7C,EAAIwD,OAbrBX,QAaqBW,OAAjBvD,EAbJ4C,iBAcIzC,KAAKqD,aAAaxD,EAAM,gBAd5B4C,0DAgBFa,QAAQd,MAARc,MACAtD,KAAKqC,oBAAoBG,MAAM7C,KAAIwD,SAjBjCV,qFAqBAc,SAAc5D,2HACNA,OAAZK,KAAKwB,KAAO7B,EADMA,SAEZK,KAAKsB,iBAFO3B,6EAKd6D,SAAgB7D,2HAEOA,OAD3BK,KAAKwB,KAAO,EACZxB,KAAKyB,aAAegC,OAAO9D,GAFPA,SAGdK,KAAKsB,iBAHS3B,0EAUtB+D,SAAa/D,GACPK,KAAK2D,WAAWhE,GAClBK,KAAKG,iBAAmBH,KAAKG,iBAAiByD,OAC3ChE,mBAAMA,EAAEU,KAAOX,EAAIW,KAGtBN,KAAKG,iBAAiB0D,KAAKlE,kCAI/BmE,iBACM9D,KAAK+D,iBACP/D,KAAKG,iBAAmB,GAExBH,KAAKG,kBAAoC,QAAjBR,OAAKgC,wBAAYhC,WAAEqE,QAAS,iCAIxDD,iBACE,OAAO/D,KAAKG,iBAAiB8D,UAA4B,QAAjBtE,OAAKgC,wBAAYhC,WAAEqE,MAAMC,oCAG7DC,+IAGItE,OAHJsE,SAEIvE,EAAWK,KAAKO,KAAKuB,MAAMnB,eAF/BuD,SAGgBrB,gBAAS7C,KAAKY,WAAdiC,qBAA6C,CAC7DC,QAAOqB,+BACFnE,KAAK+C,cAAY,CACpB,eAAgB,qBAElBqB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,eATvBN,WAGItE,EAHJsE,QAWOlB,GAXPkB,iBAYMpE,OAZNoE,SAYmBtE,EAAIqD,OAZvBiB,aAYMpE,EAZNoE,OAaMhB,MAAU,MAAJpD,WAAMqD,SAblBe,QAeIrE,OAfJqE,UAeiBtE,EAAIwD,OAfrBc,QAeqBd,OAAjBvD,EAfJqE,iBAgBIlE,KAAKqD,aAAaxD,EAAM,uBAhB5BqE,0DAkBFZ,QAAQd,MAARc,MACAtD,KAAKqC,oBAAoBG,MAAM7C,KAAIwD,SAnBjCe,kFAuBEnB,WACN,IAAMpD,EAAkC,GAClCC,EAAeI,KAAKyE,oBAAoBC,IAAI,sBAC9C9E,IACFD,EAAQ,iBAAmBC,GAE7B,IAAMC,EAAYG,KAAKyE,oBAAoBC,IAAI,aAC/C,OAAI7E,IACFF,EAAQgF,cAARhF,iBAAkCE,IAE7BF,8BAGK0D,SACZ1D,EACAC,GACe,IAAfC,EAAe+E,wLAET9E,EAAU+E,OAAOC,IAAIC,gBAAgBpF,GACrCI,EAAIiF,SAASC,cAAc,KACjCD,SAASX,KAAKa,YAAYnF,GAC1BA,EAAEoF,aAAa,SAAU,QACzBpF,EAAEqF,KAAOtF,EACJD,IACHE,EAAEsF,SAAWzF,GAEfG,EAAEoF,aAAa,SAAU,UACzBpF,EAAEuF,QAXa,kDAWbA,sCAzLO7F,GAAiBD,0FAAjBC,EAAiB8F,y2BA1F1B/F,yBACEA,+BACEA,+BAAqBA,oBAAQA,QAC7BA,0CAoCFA,QACFA,QAEAA,cACAA,mBACEA,cAAIA,4BAAgBA,QACpBA,oBAEEA,gCAASI,uBAGTJ,uBACFA,QACAA,6BAKEA,sCAAcI,oBAAdJ,CAAoC,wCACdI,sBADtBJ,CAAoC,qCAIjBI,mBAJnBJ,CAAoC,oCAKjBI,sBAEnBJ,0BAAeA,wBAAWA,QAC1BA,0BAAeA,oBAAOA,QACtBA,0BAAeA,qBAAQA,QACvBA,0BAAeA,kBAAKA,QACpBA,0BAAeA,qBAAQA,QACvBA,gCAiBFA,QACFA,eAvCIA,wFAKAA,uEAA6B,8BAA7BA,CAA6B,iEAA7BA,CAA6B,qBAA7BA,CAA6B,iCAA7BA,CAA6B,yNC5D9BgG,mEAAMA,6DAHA,GAAEC,SAXJ,CACP5E,MACA6E,cAAsB,CACpB,CACEC,KAAM,GACNC,UAAW,OACXC,UAAWpG,EACXqG,KAAM,CAAEC,WAAY","names":["b","g","Z","_","e","v","constructor","t","i","o","n","u","this","A","h","selectedInvoices","find","T","id","form","formBuilder","group","enabled","templateString","serverPath","c","ngOnInit","dataService","query","mapStream","invoiceConfig","subscribe","controls","setValue","getAllInvoices","input","page","itemsPerPage","invoices","invoicesList","save","dirty","value","mutate","toPromise","upsertInvoiceConfig","markAsPristine","changeDetector","markForCheck","notificationService","success","entity","error","downloadSelected","map","invoiceNumber","join","fetch","headers","getHeaders","ok","json","Error","message","blob","downloadBlob","console","setPageNumber","setItemsPerPage","Number","toggleSelect","isSelected","filter","push","toggleSelectAll","areAllSelected","items","length","testDownload","Object","method","body","JSON","stringify","template","localStorageService","get","authorization","arguments","window","URL","createObjectURL","document","createElement","appendChild","setAttribute","href","download","click","selectors","m","imports","f","path","pathMatch","component","data","breadcrumb"],"sources":["webpack:///src/extensions/b1226226f0c80c12507bac295581f0498df0d5dd832527153f2afe526acdd097/queries.graphql.ts","webpack:///src/extensions/b1226226f0c80c12507bac295581f0498df0d5dd832527153f2afe526acdd097/invoices.component.ts","webpack:///src/extensions/b1226226f0c80c12507bac295581f0498df0d5dd832527153f2afe526acdd097/invoices.module.ts"],"sourcesContent":["import gql from 'graphql-tag';\n\nexport const upsertConfigMutation = gql`\n  mutation upsertInvoiceConfig($input: InvoiceConfigInput!) {\n    upsertInvoiceConfig(input: $input) {\n      id\n      enabled\n      templateString\n    }\n  }\n`;\n\nexport const getConfigQuery = gql`\n  query invoiceConfig {\n    invoiceConfig {\n      id\n      enabled\n      templateString\n    }\n  }\n`;\n\nexport const getAllInvoicesQuery = gql`\n  query invoices($input: InvoicesListInput) {\n    invoices(input: $input) {\n      items {\n        id\n        createdAt\n        orderCode\n        orderId\n        customerEmail\n        invoiceNumber\n        downloadUrl\n      }\n      totalItems\n    }\n  }\n`;\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  DataService,\n  getServerLocation,\n  LocalStorageService,\n  NotificationService,\n} from '@vendure/admin-ui/core';\nimport {\n  getAllInvoicesQuery,\n  getConfigQuery,\n  upsertConfigMutation,\n} from './queries.graphql';\nimport {\n  Invoice,\n  InvoiceConfig,\n  InvoiceConfigQuery,\n  InvoiceList,\n  InvoicesQuery,\n  InvoicesQueryVariables,\n  UpsertInvoiceConfigMutation,\n  UpsertInvoiceConfigMutationVariables,\n} from './generated/graphql';\n\n@Component({\n  selector: 'invoices-component',\n  template: `\n    <clr-accordion>\n      <clr-accordion-panel>\n        <clr-accordion-title>Settings</clr-accordion-title>\n        <clr-accordion-content *clrIfExpanded>\n          <section class=\"form-block\">\n            <form class=\"form\" [formGroup]=\"form\">\n              <vdr-form-field label=\"Generate invoices on\" for=\"enabled\">\n                <clr-checkbox-wrapper>\n                  <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    formControlName=\"enabled\"\n                  />\n                </clr-checkbox-wrapper>\n              </vdr-form-field>\n              <vdr-form-field label=\"HTML template\" for=\"templateString\">\n                <textarea\n                  id=\"templateString\"\n                  type=\"text\"\n                  formControlName=\"templateString\"\n                  style=\"height: 300px; width: 100%;\"\n                ></textarea>\n              </vdr-form-field>\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"form.invalid || form.pristine\"\n              >\n                Save\n              </button>\n              <button class=\"btn btn-secondary\" (click)=\"testDownload()\">\n                Preview\n              </button>\n              <vdr-help-tooltip\n                content=\"Preview the HTML template. Uses the most recent placed order. Just a preview, it doesn't save any invoices!\"\n              ></vdr-help-tooltip>\n            </form>\n          </section>\n        </clr-accordion-content>\n      </clr-accordion-panel>\n    </clr-accordion>\n\n    <hr />\n    <section>\n      <h2>Created invoices</h2>\n      <button\n        class=\"btn btn-primary\"\n        (click)=\"downloadSelected()\"\n        [disabled]=\"selectedInvoices?.length == 0\"\n      >\n        Download\n      </button>\n      <vdr-data-table\n        [items]=\"invoicesList?.items\"\n        [itemsPerPage]=\"itemsPerPage\"\n        [totalItems]=\"invoicesList?.totalItems\"\n        [currentPage]=\"page\"\n        (pageChange)=\"setPageNumber($event)\"\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\n        [allSelected]=\"areAllSelected()\"\n        [isRowSelectedFn]=\"isSelected\"\n        (rowSelectChange)=\"toggleSelect($event)\"\n        (allSelectChange)=\"toggleSelectAll()\"\n      >\n        <vdr-dt-column>Invoice nr.</vdr-dt-column>\n        <vdr-dt-column>Created</vdr-dt-column>\n        <vdr-dt-column>Customer</vdr-dt-column>\n        <vdr-dt-column>Order</vdr-dt-column>\n        <vdr-dt-column>Download</vdr-dt-column>\n        <ng-template let-invoice=\"item\">\n          <td class=\"left align-middle\">{{ invoice.invoiceNumber }}</td>\n          <td class=\"left align-middle\">\n            {{ invoice.createdAt | date }}\n          </td>\n          <td class=\"left align-middle\">{{ invoice.customerEmail }}</td>\n          <td class=\"left align-middle\">\n            <a [routerLink]=\"['/orders', invoice.orderId]\">\n              {{ invoice.orderCode }}\n            </a>\n          </td>\n          <td class=\"left align-middle\">\n            <a [href]=\"invoice.downloadUrl\" target=\"_blank\">\n              <clr-icon shape=\"download\"></clr-icon>\n            </a>\n          </td>\n        </ng-template>\n      </vdr-data-table>\n    </section>\n  `,\n})\nexport class InvoicesComponent implements OnInit {\n  form: FormGroup;\n  invoicesList: InvoiceList | undefined;\n  itemsPerPage = 10;\n  page = 1;\n  selectedInvoices: Invoice[] = [];\n  serverPath: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    protected dataService: DataService,\n    private changeDetector: ChangeDetectorRef,\n    private notificationService: NotificationService,\n    private localStorageService: LocalStorageService\n  ) {\n    this.form = this.formBuilder.group({\n      enabled: ['enabled'],\n      templateString: ['templateString'],\n    });\n    this.serverPath = getServerLocation();\n  }\n\n  async ngOnInit(): Promise<void> {\n    await this.dataService\n      .query<InvoiceConfigQuery>(getConfigQuery)\n      .mapStream((d) => d.invoiceConfig)\n      .subscribe((config) => {\n        this.form.controls['enabled'].setValue(config?.enabled);\n        this.form.controls['templateString'].setValue(config?.templateString);\n      });\n    await this.getAllInvoices();\n  }\n\n  async getAllInvoices(): Promise<void> {\n    await this.dataService\n      .query<InvoicesQuery, InvoicesQueryVariables>(getAllInvoicesQuery, {\n        input: {\n          page: this.page,\n          itemsPerPage: this.itemsPerPage,\n        },\n      })\n      .mapStream((r) => r.invoices)\n      .subscribe((result) => {\n        this.invoicesList = result;\n      });\n  }\n\n  async save() {\n    try {\n      if (this.form.dirty) {\n        const formValue = this.form.value;\n        const { upsertInvoiceConfig: result } = await this.dataService\n          .mutate<\n            UpsertInvoiceConfigMutation,\n            UpsertInvoiceConfigMutationVariables\n          >(upsertConfigMutation, {\n            input: {\n              enabled: formValue.enabled,\n              templateString: formValue.templateString,\n            },\n          })\n          .toPromise();\n        this.form.controls['enabled'].setValue(result.enabled);\n        this.form.controls['templateString'].setValue(result.templateString);\n      }\n      this.form.markAsPristine();\n      this.changeDetector.markForCheck();\n      this.notificationService.success('common.notify-update-success', {\n        entity: 'InvoiceConfig',\n      });\n    } catch (e) {\n      this.notificationService.error('common.notify-update-error', {\n        entity: 'InvoiceConfig',\n      });\n    }\n  }\n\n  async downloadSelected(): Promise<void> {\n    try {\n      const nrs = this.selectedInvoices.map((i) => i.invoiceNumber).join(',');\n      const res = await fetch(\n        `${this.serverPath}/invoices/download?nrs=${nrs}`,\n        {\n          headers: this.getHeaders(),\n        }\n      );\n      if (!res.ok) {\n        const json = await res.json();\n        throw Error(json?.message);\n      }\n      const blob = await res.blob();\n      await this.downloadBlob(blob, 'invoices.zip');\n    } catch (err) {\n      console.error(err);\n      this.notificationService.error(err.message);\n    }\n  }\n\n  async setPageNumber(page: number) {\n    this.page = page;\n    await this.getAllInvoices();\n  }\n\n  async setItemsPerPage(nrOfItems: number) {\n    this.page = 1;\n    this.itemsPerPage = Number(nrOfItems);\n    await this.getAllInvoices();\n  }\n\n  isSelected = (row: Invoice): boolean => {\n    return !!this.selectedInvoices?.find((selected) => selected.id === row.id);\n  };\n\n  toggleSelect(row: Invoice): void {\n    if (this.isSelected(row)) {\n      this.selectedInvoices = this.selectedInvoices.filter(\n        (s) => s.id !== row.id\n      );\n    } else {\n      this.selectedInvoices.push(row);\n    }\n  }\n\n  toggleSelectAll() {\n    if (this.areAllSelected()) {\n      this.selectedInvoices = [];\n    } else {\n      this.selectedInvoices = this.invoicesList?.items || [];\n    }\n  }\n\n  areAllSelected(): boolean {\n    return this.selectedInvoices.length === this.invoicesList?.items.length;\n  }\n\n  async testDownload() {\n    try {\n      const template = this.form.value.templateString;\n      const res = await fetch(`${this.serverPath}/invoices/preview`, {\n        headers: {\n          ...this.getHeaders(),\n          'Content-Type': 'application/json',\n        },\n        method: 'POST',\n        body: JSON.stringify({ template }),\n      });\n      if (!res.ok) {\n        const json = await res.json();\n        throw Error(json?.message);\n      }\n      const blob = await res.blob();\n      await this.downloadBlob(blob, 'test-invoice.pdf', true);\n    } catch (err) {\n      console.error(err);\n      this.notificationService.error(err.message);\n    }\n  }\n\n  private getHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n    const channelToken = this.localStorageService.get('activeChannelToken');\n    if (channelToken) {\n      headers['vendure-token'] = channelToken;\n    }\n    const authToken = this.localStorageService.get('authToken');\n    if (authToken) {\n      headers.authorization = `Bearer ${authToken}`;\n    }\n    return headers;\n  }\n\n  private async downloadBlob(\n    blob: Blob,\n    fileName: string,\n    openInNewTab = false\n  ): Promise<void> {\n    const blobUrl = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.setAttribute('hidden', 'true');\n    a.href = blobUrl;\n    if (!openInNewTab) {\n      a.download = fileName;\n    }\n    a.setAttribute('target', '_blank');\n    a.click();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\nimport { InvoicesComponent } from './invoices.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: InvoicesComponent,\n        data: { breadcrumb: 'Invoices' },\n      },\n    ]),\n  ],\n  providers: [],\n  declarations: [InvoicesComponent],\n})\nexport class InvoicesModule {}\n"]}