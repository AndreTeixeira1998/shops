{"version":3,"mappings":"gTAuCYA,oBACEA,SACFA,kCAF4CA,iBAC1CA,2BAgBP,QAKLC,YACUC,EACEC,EACFC,EACAC,EACAC,GAJAC,mBACEA,mBACFA,sBACAA,2BACAA,2BAPVA,gBAAuB,GASrBA,KAAKC,KAAOD,KAAKE,YAAYC,MAAM,CACjCC,SAAU,KACVC,OAAQ,KACRC,SAAU,OAEZN,KAAKO,cAAaC,QAGpBC,WACET,KAAKU,YACFC,MACCC;;;;WAMDC,QAAQC,UAAWnB,UAClBK,KAAKe,WAAapB,EAAOqB,+BACzBhB,KAAKC,KAAKgB,SAASX,SAAYY,SAAwB,QAAftB,OAAKmB,kBAAU,eAAG,MAI1DI,yDACJ,IACE,MAAMxB,QAAYyB,MAChB,GAAGpB,KAAKO,mCAAmCP,KAAKC,KAAKoB,MAAMf,sBAAsBN,KAAKC,KAAKoB,MAAMjB,oBAAoBJ,KAAKC,KAAKoB,MAAMhB,SACrI,CACEiB,QAAStB,KAAKuB,eAGlB,IAAK5B,EAAI6B,GAAI,CACX,MAAMC,QAAa9B,EAAI+B,OACvB,MAAMC,MAAU,MAAJF,OAAI,EAAJA,EAAMG,SAIpB,MAAM9B,EAFSH,EAAI2B,QAAQO,IAAI,uBACTC,MAAM,KACL,GAAGA,MAAM,KAAK,GAC/B/B,QAAaJ,EAAIoC,aACjB/B,KAAKgC,aAAajC,EAAMD,SACvBH,GACPsC,QAAQC,MAAMvC,GACdK,KAAKmC,oBAAoBD,MAAMvC,EAAIiC,YAI/BL,aACN,MAAM5B,EAAkC,GAClCC,EAAeI,KAAKoC,oBAAoBP,IAAI,sBAC9CjC,IACFD,EAAQ,iBAAmBC,GAE7B,MAAMC,EAAYG,KAAKoC,oBAAoBP,IAAI,aAC/C,OAAIhC,IACFF,EAAQ0C,cAAgB,UAAUxC,KAE7BF,EAGKqC,aAAarC,EAAYC,iDACrC,MAAMC,EAAUyC,OAAOC,IAAIC,gBAAgB7C,GACrCG,EAAI2C,SAASC,cAAc,KACjCD,SAASE,KAAKC,YAAY9C,GAC1BA,EAAE+C,aAAa,SAAU,QACzB/C,EAAEgD,KAAOjD,EACTC,EAAEqB,SAAWvB,EACbE,EAAE+C,aAAa,SAAU,UACzB/C,EAAEiD,iDA/EOC,GAAoBvD,0FAApBuD,EAAoBC,ieA1C7BxD,cAAIA,yBAAaA,QACjBA,kBACEA,qBACEA,iBACEA,eACEA,iBAAOA,8BAAyCA,QAChDA,iCAKFA,QACAA,gBACEA,kBAAOA,gCAAuCA,QAC9CA,kCAKFA,QACFA,QACAA,eACAA,iCACEA,kBAAOA,sBAASA,QAChBA,qBACEA,2BAGFA,QACFA,QACAA,eACAA,qBAGEA,gCAASG,eAETH,qBACFA,QACFA,QACFA,eAtCmBA,mCAIJA,mDAQAA,kDAYsBA,uCAQ/BA,wLC3BH,+CAAMyD,6DAHA,GAAEC,SAXJ,CACP3C,MACA4C,cAAsB,CACpB,CACEC,KAAM,GACNC,UAAW,OACXC,UAAWP,EACXQ,KAAM,CAAEC,WAAY","names":["t","constructor","e","r","i","a","m","this","form","formBuilder","group","startsAt","endsAt","strategy","serverPath","s","ngOnInit","dataService","query","g","single$","subscribe","strategies","availableOrderExportStrategies","controls","setValue","download","fetch","value","headers","getHeaders","ok","p","json","Error","message","get","split","blob","downloadBlob","console","error","notificationService","localStorageService","authorization","window","URL","createObjectURL","document","createElement","body","appendChild","setAttribute","href","click","c","selectors","d","imports","f","path","pathMatch","component","data","breadcrumb"],"sources":["webpack:///src/extensions/b9d89136bcd0d3fbb69a852e2e8e9169dbfc68b5ebb99e6d303067ca291a8db3/order-export.component.ts","webpack:///src/extensions/b9d89136bcd0d3fbb69a852e2e8e9169dbfc68b5ebb99e6d303067ca291a8db3/order-export.module.ts"],"sourcesContent":["import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  DataService,\n  getServerLocation,\n  LocalStorageService,\n  NotificationService,\n} from '@vendure/admin-ui/core';\nimport gql from 'graphql-tag';\n\n@Component({\n  selector: 'order-export-component',\n  styles: [],\n  template: `\n    <h1>Export orders</h1>\n    <form class=\"form\" [formGroup]=\"form\" id=\"export-form\">\n      <section class=\"form-block\">\n        <div class=\"flex\">\n          <div>\n            <label>{{ 'order.placed-at-start' | translate }}</label>\n            <vdr-datetime-picker\n              required\n              timeGranularityInterval=\"60\"\n              formControlName=\"startsAt\"\n            ></vdr-datetime-picker>\n          </div>\n          <div>\n            <label>{{ 'order.placed-at-end' | translate }}</label>\n            <vdr-datetime-picker\n              required\n              timeGranularityInterval=\"60\"\n              formControlName=\"endsAt\"\n            ></vdr-datetime-picker>\n          </div>\n        </div>\n        <br />\n        <clr-select-container>\n          <label>Export as</label>\n          <select clrSelect name=\"options\" formControlName=\"strategy\" required>\n            <option *ngFor=\"let strategy of strategies\" [value]=\"strategy\">\n              {{ strategy }}\n            </option>\n          </select>\n        </clr-select-container>\n        <br />\n        <button\n          class=\"btn btn-primary\"\n          [disabled]=\"form.invalid || form.pristine\"\n          (click)=\"download()\"\n        >\n          Export\n        </button>\n      </section>\n    </form>\n  `,\n})\nexport class OrderExportComponent implements OnInit {\n  form: FormGroup;\n  serverPath: string;\n  strategies: string[] = [];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    protected dataService: DataService,\n    private changeDetector: ChangeDetectorRef,\n    private notificationService: NotificationService,\n    private localStorageService: LocalStorageService\n  ) {\n    this.form = this.formBuilder.group({\n      startsAt: null,\n      endsAt: null,\n      strategy: null,\n    });\n    this.serverPath = getServerLocation();\n  }\n\n  ngOnInit(): void {\n    this.dataService\n      .query(\n        gql`\n          query availableOrderExportStrategies {\n            availableOrderExportStrategies\n          }\n        `\n      )\n      .single$.subscribe((result: any) => {\n        this.strategies = result.availableOrderExportStrategies;\n        this.form.controls['strategy'].setValue(this.strategies?.[0]);\n      });\n  }\n\n  async download(): Promise<void> {\n    try {\n      const res = await fetch(\n        `${this.serverPath}/export-orders/export/${this.form.value.strategy}?startDate=${this.form.value.startsAt}&endDate=${this.form.value.endsAt}`,\n        {\n          headers: this.getHeaders(),\n        }\n      );\n      if (!res.ok) {\n        const json = await res.json();\n        throw Error(json?.message);\n      }\n      const header = res.headers.get('Content-Disposition');\n      const parts = header!.split(';');\n      const filename = parts[1].split('=')[1];\n      const blob = await res.blob();\n      await this.downloadBlob(blob, filename);\n    } catch (err) {\n      console.error(err);\n      this.notificationService.error(err.message);\n    }\n  }\n\n  private getHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n    const channelToken = this.localStorageService.get('activeChannelToken');\n    if (channelToken) {\n      headers['vendure-token'] = channelToken;\n    }\n    const authToken = this.localStorageService.get('authToken');\n    if (authToken) {\n      headers.authorization = `Bearer ${authToken}`;\n    }\n    return headers;\n  }\n\n  private async downloadBlob(blob: Blob, fileName: string): Promise<void> {\n    const blobUrl = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.setAttribute('hidden', 'true');\n    a.href = blobUrl;\n    a.download = fileName;\n    a.setAttribute('target', '_blank');\n    a.click();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\nimport { OrderExportComponent } from './order-export.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: OrderExportComponent,\n        data: { breadcrumb: 'Export orders' },\n      },\n    ]),\n  ],\n  providers: [],\n  declarations: [OrderExportComponent],\n})\nexport class OrderExportModule {}\n"]}