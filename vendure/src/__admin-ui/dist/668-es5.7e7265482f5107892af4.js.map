{"version":3,"mappings":"0wOAEaA,EAAuBC,2LAUvBC,EAAiBD,gIAUjBE,EAAsBF,iSAiBtBG,EAA8BH,sKC4B/BI,oBACEA,6EACAA,gBAGGA,+BAAmBA,QACrBA,cACDA,cACAA,sGACuBA,aAAGA,kCAAsBA,QAClDA,+CA7CJA,iCACEA,qBACEA,kBACEA,4BACEA,gCACEA,mBAKFA,QACFA,QACAA,4BACEA,sBAMFA,QACAA,oBAEEA,0DAGAA,kBACFA,QACAA,qBAAkCA,kEAChCA,sBACFA,QACAA,gCAGFA,QACAA,eACAA,2BAWFA,QACFA,8BA7CuBA,mCAqBfA,2DAYIA,0GA4CVA,iBAA8BA,SAA2BA,QACzDA,iBACEA,yBACFA,QACAA,iBAA8BA,SAA2BA,QACzDA,iBACEA,gBACEA,SACFA,QACFA,QACAA,kBACEA,iBACEA,wBACFA,QACFA,2BAd8BA,gCAE5BA,+CAE4BA,gCAEzBA,kDACDA,oCAICA,4CASR,iBASLC,WACUC,EACEC,EACFC,EACAC,EACAC,wBAJAC,mBACEA,mBACFA,sBACAA,2BACAA,2BAXVA,kBAAe,GACfA,UAAO,EACPA,sBAA8B,GA8G9BA,gBAAcC,kBACZ,SAA8B,QAArBC,IAAKC,4BAAgBD,WAAEE,KAAMC,mBAAaA,EAASC,KAAOL,EAAIK,OApGvEN,KAAKO,KAAOP,KAAKQ,YAAYC,MAAM,CACjCC,QAAS,CAAC,WACVC,eAAgB,CAAC,oBAEnBX,KAAKY,cAAaC,QA2KhBC,OAxKEC,yKAY4CpB,OAXhDK,KAAKgB,YACFC,MAA0B3B,GAC1B4B,UAAWvB,mBAAMA,EAAEwB,gBACnBC,UAAWzB,YACVK,EAAKO,KAAKc,SAASX,QAAWY,SAAe,MAAN3B,WAAQe,SAC/CV,EAAKO,KAAKc,SAASV,eAAkBW,SAAe,MAAN3B,WAAQgB,kBAG1DX,KAAKgB,YACFC,MAAwCzB,GACxC0B,UAAWvB,mBAAMA,EAAE4B,8BACnBH,UAAWzB,mBAAYK,EAAKwB,eAAiB7B,aAC1CK,KAAKyB,iEAGPA,0LACEzB,KAAKgB,YACRC,MAA6C1B,EAAqB,CACjEmC,MAAO,CACLC,KAAM3B,KAAK2B,KACXC,aAAc5B,KAAK4B,gBAGtBV,UAAWvB,mBAAMA,EAAEkC,WACnBT,UAAWzB,YACVK,EAAK8B,aAAenC,oDAIpBoC,4KAEE/B,KAAKO,KAAKyB,sBAEiBpC,OADvBD,EAAYK,KAAKO,KAAK0B,eACkBjC,KAAKgB,YAChDkB,OAGC9C,EAAsB,CACtBsC,MAAO,CACLhB,QAASf,EAAUe,QACnBC,eAAgBhB,EAAUgB,kBAG7BwB,4BAV0BvC,IAArBwC,oBAWRpC,KAAKO,KAAKc,SAASX,QAAWY,SAAS1B,EAAOc,SAC9CV,KAAKO,KAAKc,SAASV,eAAkBW,SAAS1B,EAAOe,uBAEvDX,KAAKO,KAAK8B,iBACVrC,KAAKsC,eAAeC,eACpBvC,KAAKwC,oBAAoBC,QAAQ,+BAAgC,CAC/DC,OAAQ,oEAGV1C,KAAKwC,oBAAoBG,MAAM,6BAA8B,CAC3DD,OAAQ,4EAKRE,6KAGIhD,OAHJgD,SAEIjD,EAAMK,KAAKG,iBAAiB0C,IAAK/C,mBAAMA,EAAEgD,gBAAeC,KAAK,cACjDC,gBACbhD,KAAKY,6CAAoCjB,GAC5C,CACEsD,QAASjD,KAAKkD,sBAHZtD,cAMGuD,oBACDrD,OADCqD,SACYvD,EAAIwD,cAAjBtD,eACAuD,MAAU,MAAJvD,WAAMwD,iBAEdzD,OAFcyD,UAED1D,EAAI2D,sBAAjB1D,mBACAG,KAAKwD,aAAa3D,EAAM,0EAE9B4D,QAAQd,YACR3C,KAAKwC,oBAAoBG,MAAMhD,KAAI2D,mEAIjCI,oCAAc/D,2HACNA,OAAZK,KAAK2B,KAAOhC,WACNK,KAAKyB,iEAGPkC,sCAAgBhE,2HAEOA,OAD3BK,KAAK2B,KAAO,EACZ3B,KAAK4B,aAAegC,OAAOjE,YACrBK,KAAKyB,iEAOboC,mCAAalE,GACPK,KAAK8D,WAAWnE,GAClBK,KAAKG,iBAAmBH,KAAKG,iBAAiB4D,OAC3CnE,mBAAMA,EAAEU,KAAOX,EAAIW,KAGtBN,KAAKG,iBAAiB6D,KAAKrE,KAI/BsE,8CACMjE,KAAKkE,iBACPlE,KAAKG,iBAAmB,GAExBH,KAAKG,kBAAoC,QAAjBR,OAAKmC,wBAAYnC,WAAEwE,QAAS,KAIxDD,6CACE,OAAOlE,KAAKG,iBAAiBiE,UAA4B,QAAjBzE,OAAKmC,wBAAYnC,WAAEwE,MAAMC,UAG7DC,yKAGIzE,OAHJyE,SAEI1E,EAAWK,KAAKO,KAAK0B,MAAMtB,wBACfqC,gBAAShD,KAAKY,gCAA+B,CAC7DqC,QAAOqB,+BACFtE,KAAKkD,cAAY,CACpB,eAAgB,qBAElBqB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,sBANnB/E,cAQGuD,oBACDrD,OADCqD,SACYvD,EAAIwD,cAAjBtD,eACAuD,MAAU,MAAJvD,WAAMwD,iBAEdzD,OAFcyD,UAED1D,EAAI2D,sBAAjB1D,mBACAG,KAAKwD,aAAa3D,EAAM,uBAAoB,0DAElD4D,QAAQd,YACR3C,KAAKwC,oBAAoBG,MAAMhD,KAAI2D,mEAI/BJ,mCACN,IAAMvD,EAAkC,GAClCC,EAAeI,KAAK4E,oBAAoBC,IAAI,sBAC9CjF,IACFD,EAAQ,iBAAmBC,GAE7B,IAAMC,EAAYG,KAAK4E,oBAAoBC,IAAI,aAC/C,OAAIhF,IACFF,EAAQmF,+BAA0BjF,IAE7BF,IAGK6D,mCACZ7D,EACAC,GACe,IAAfC,0DAAe,gIAETC,EAAUiF,OAAOC,IAAIC,gBAAgBtF,GACrCI,EAAImF,SAASC,cAAc,KACjCD,SAASV,KAAKY,YAAYrF,GAC1BA,EAAEsF,aAAa,SAAU,QACzBtF,EAAEuF,KAAOxF,EACJD,IACHE,EAAEwF,SAAW3F,GAEfG,EAAEsF,aAAa,SAAU,UACzBtF,EAAEe,uDA/LC,GA+LDA,sCA/LO0E,GAAiB/F,0FAAjB+F,EAAiBC,q/BAtG1BhG,yBACEA,+BACEA,+BAAqBA,oBAAQA,QAC7BA,0CAgDFA,QACFA,QAEAA,cACAA,mBACEA,cAAIA,4BAAgBA,QACpBA,oBAEEA,gCAASG,uBAGTH,uBACFA,QACAA,6BAKEA,sCAAcG,oBAAdH,CAAoC,wCACdG,sBADtBH,CAAoC,qCAIjBG,mBAJnBH,CAAoC,oCAKjBG,sBAEnBH,0BAAeA,wBAAWA,QAC1BA,0BAAeA,oBAAOA,QACtBA,0BAAeA,qBAAQA,QACvBA,0BAAeA,kBAAKA,QACpBA,0BAAeA,qBAAQA,QACvBA,gCAiBFA,QACFA,eAvCIA,wFAKAA,uEAA6B,8BAA7BA,CAA6B,iEAA7BA,CAA6B,qBAA7BA,CAA6B,iCAA7BA,CAA6B,0NC1E9B,uEAAMiG,6DAHA,GAAEC,SAXJ,CACP9E,MACA+E,cAAsB,CACpB,CACEC,KAAM,GACNC,UAAW,OACXC,UAAWP,EACXQ,KAAM,CAAEC,WAAY","names":["_","g","Z","S","I","e","constructor","t","i","o","n","u","this","P","h","selectedInvoices","find","U","id","form","formBuilder","group","enabled","templateString","serverPath","c","click","ngOnInit","dataService","query","mapStream","invoiceConfig","subscribe","controls","setValue","isInvoicePluginLicenseValid","isLicenseValid","getAllInvoices","input","page","itemsPerPage","invoices","invoicesList","save","dirty","value","mutate","toPromise","upsertInvoiceConfig","markAsPristine","changeDetector","markForCheck","notificationService","success","entity","error","downloadSelected","map","invoiceNumber","join","fetch","headers","getHeaders","ok","json","Error","message","blob","downloadBlob","console","setPageNumber","setItemsPerPage","Number","toggleSelect","isSelected","filter","push","toggleSelectAll","areAllSelected","items","length","testDownload","Object","method","body","JSON","stringify","template","localStorageService","get","authorization","window","URL","createObjectURL","document","createElement","appendChild","setAttribute","href","download","v","selectors","m","imports","f","path","pathMatch","component","data","breadcrumb"],"sources":["webpack:///src/extensions/37d7092441b912af19f217975c0ca13f1a2e989bbd1decf5cb96dd931b181b30/queries.graphql.ts","webpack:///src/extensions/37d7092441b912af19f217975c0ca13f1a2e989bbd1decf5cb96dd931b181b30/invoices.component.ts","webpack:///src/extensions/37d7092441b912af19f217975c0ca13f1a2e989bbd1decf5cb96dd931b181b30/invoices.module.ts"],"sourcesContent":["import gql from 'graphql-tag';\n\nexport const upsertConfigMutation = gql`\n  mutation upsertInvoiceConfig($input: InvoiceConfigInput!) {\n    upsertInvoiceConfig(input: $input) {\n      id\n      enabled\n      templateString\n    }\n  }\n`;\n\nexport const getConfigQuery = gql`\n  query invoiceConfig {\n    invoiceConfig {\n      id\n      enabled\n      templateString\n    }\n  }\n`;\n\nexport const getAllInvoicesQuery = gql`\n  query invoices($input: InvoicesListInput) {\n    invoices(input: $input) {\n      items {\n        id\n        createdAt\n        orderCode\n        orderId\n        customerEmail\n        invoiceNumber\n        downloadUrl\n      }\n      totalItems\n    }\n  }\n`;\n\nexport const isInvoicePluginLicenseValid = gql`\n  query isInvoicePluginLicenseValid {\n    isInvoicePluginLicenseValid\n  }\n`;\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  DataService,\n  getServerLocation,\n  LocalStorageService,\n  NotificationService,\n} from '@vendure/admin-ui/core';\nimport {\n  getAllInvoicesQuery,\n  getConfigQuery,\n  isInvoicePluginLicenseValid,\n  upsertConfigMutation,\n} from './queries.graphql';\nimport {\n  Invoice,\n  InvoiceConfig,\n  InvoiceConfigQuery,\n  InvoiceList,\n  InvoicesQuery,\n  InvoicesQueryVariables,\n  IsInvoicePluginLicenseValidQuery,\n  UpsertInvoiceConfigMutation,\n  UpsertInvoiceConfigMutationVariables,\n} from './generated/graphql';\n\n@Component({\n  selector: 'invoices-component',\n  template: `\n    <clr-accordion>\n      <clr-accordion-panel>\n        <clr-accordion-title>Settings</clr-accordion-title>\n        <clr-accordion-content *clrIfExpanded>\n          <section class=\"form-block\">\n            <form class=\"form\" [formGroup]=\"form\">\n              <vdr-form-field label=\"Generate invoices on\" for=\"enabled\">\n                <clr-checkbox-wrapper>\n                  <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    formControlName=\"enabled\"\n                  />\n                </clr-checkbox-wrapper>\n              </vdr-form-field>\n              <vdr-form-field label=\"HTML template\" for=\"templateString\">\n                <textarea\n                  id=\"templateString\"\n                  type=\"text\"\n                  formControlName=\"templateString\"\n                  style=\"height: 300px; width: 100%;\"\n                ></textarea>\n              </vdr-form-field>\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"form.invalid || form.pristine\"\n              >\n                Save\n              </button>\n              <button class=\"btn btn-secondary\" (click)=\"testDownload()\">\n                Preview\n              </button>\n              <vdr-help-tooltip\n                content=\"Preview the HTML template. Uses the most recent placed order. Just a preview, it doesn't save any invoices!\"\n              ></vdr-help-tooltip>\n            </form>\n            <br />\n            <small *ngIf=\"!isLicenseValid\" style=\"color: red;\">\n              For commercial use of this plugin, please purchase a license at\n              <a\n                href=\"https://pinelab-plugins.com/plugin/vendure-plugin-invoices/\"\n                target=\"_blank\"\n                >pinelab-plugins.com</a\n              >.\n              <br />\n              Already a user of this plugin? You might be applicable for a free\n              license! Contact us at <b>plugins@pinelab.studio</b>\n            </small>\n          </section>\n        </clr-accordion-content>\n      </clr-accordion-panel>\n    </clr-accordion>\n\n    <hr />\n    <section>\n      <h2>Created invoices</h2>\n      <button\n        class=\"btn btn-primary\"\n        (click)=\"downloadSelected()\"\n        [disabled]=\"selectedInvoices?.length == 0\"\n      >\n        Download\n      </button>\n      <vdr-data-table\n        [items]=\"invoicesList?.items\"\n        [itemsPerPage]=\"itemsPerPage\"\n        [totalItems]=\"invoicesList?.totalItems\"\n        [currentPage]=\"page\"\n        (pageChange)=\"setPageNumber($event)\"\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\n        [allSelected]=\"areAllSelected()\"\n        [isRowSelectedFn]=\"isSelected\"\n        (rowSelectChange)=\"toggleSelect($event)\"\n        (allSelectChange)=\"toggleSelectAll()\"\n      >\n        <vdr-dt-column>Invoice nr.</vdr-dt-column>\n        <vdr-dt-column>Created</vdr-dt-column>\n        <vdr-dt-column>Customer</vdr-dt-column>\n        <vdr-dt-column>Order</vdr-dt-column>\n        <vdr-dt-column>Download</vdr-dt-column>\n        <ng-template let-invoice=\"item\">\n          <td class=\"left align-middle\">{{ invoice.invoiceNumber }}</td>\n          <td class=\"left align-middle\">\n            {{ invoice.createdAt | date }}\n          </td>\n          <td class=\"left align-middle\">{{ invoice.customerEmail }}</td>\n          <td class=\"left align-middle\">\n            <a [routerLink]=\"['/orders', invoice.orderId]\">\n              {{ invoice.orderCode }}\n            </a>\n          </td>\n          <td class=\"left align-middle\">\n            <a [href]=\"invoice.downloadUrl\" target=\"_blank\">\n              <clr-icon shape=\"download\"></clr-icon>\n            </a>\n          </td>\n        </ng-template>\n      </vdr-data-table>\n    </section>\n  `,\n})\nexport class InvoicesComponent implements OnInit {\n  form: FormGroup;\n  invoicesList: InvoiceList | undefined;\n  itemsPerPage = 10;\n  page = 1;\n  selectedInvoices: Invoice[] = [];\n  serverPath: string;\n  isLicenseValid: boolean | undefined | null;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    protected dataService: DataService,\n    private changeDetector: ChangeDetectorRef,\n    private notificationService: NotificationService,\n    private localStorageService: LocalStorageService\n  ) {\n    this.form = this.formBuilder.group({\n      enabled: ['enabled'],\n      templateString: ['templateString'],\n    });\n    this.serverPath = getServerLocation();\n  }\n\n  async ngOnInit(): Promise<void> {\n    this.dataService\n      .query<InvoiceConfigQuery>(getConfigQuery)\n      .mapStream((d) => d.invoiceConfig)\n      .subscribe((config) => {\n        this.form.controls['enabled'].setValue(config?.enabled);\n        this.form.controls['templateString'].setValue(config?.templateString);\n      });\n    // Validate license\n    this.dataService\n      .query<IsInvoicePluginLicenseValidQuery>(isInvoicePluginLicenseValid)\n      .mapStream((l) => l.isInvoicePluginLicenseValid)\n      .subscribe((result) => (this.isLicenseValid = result));\n    await this.getAllInvoices();\n  }\n\n  async getAllInvoices(): Promise<void> {\n    await this.dataService\n      .query<InvoicesQuery, InvoicesQueryVariables>(getAllInvoicesQuery, {\n        input: {\n          page: this.page,\n          itemsPerPage: this.itemsPerPage,\n        },\n      })\n      .mapStream((r) => r.invoices)\n      .subscribe((result) => {\n        this.invoicesList = result;\n      });\n  }\n\n  async save() {\n    try {\n      if (this.form.dirty) {\n        const formValue = this.form.value;\n        const { upsertInvoiceConfig: result } = await this.dataService\n          .mutate<\n            UpsertInvoiceConfigMutation,\n            UpsertInvoiceConfigMutationVariables\n          >(upsertConfigMutation, {\n            input: {\n              enabled: formValue.enabled,\n              templateString: formValue.templateString,\n            },\n          })\n          .toPromise();\n        this.form.controls['enabled'].setValue(result.enabled);\n        this.form.controls['templateString'].setValue(result.templateString);\n      }\n      this.form.markAsPristine();\n      this.changeDetector.markForCheck();\n      this.notificationService.success('common.notify-update-success', {\n        entity: 'InvoiceConfig',\n      });\n    } catch (e) {\n      this.notificationService.error('common.notify-update-error', {\n        entity: 'InvoiceConfig',\n      });\n    }\n  }\n\n  async downloadSelected(): Promise<void> {\n    try {\n      const nrs = this.selectedInvoices.map((i) => i.invoiceNumber).join(',');\n      const res = await fetch(\n        `${this.serverPath}/invoices/download?nrs=${nrs}`,\n        {\n          headers: this.getHeaders(),\n        }\n      );\n      if (!res.ok) {\n        const json = await res.json();\n        throw Error(json?.message);\n      }\n      const blob = await res.blob();\n      await this.downloadBlob(blob, 'invoices.zip');\n    } catch (err) {\n      console.error(err);\n      this.notificationService.error(err.message);\n    }\n  }\n\n  async setPageNumber(page: number) {\n    this.page = page;\n    await this.getAllInvoices();\n  }\n\n  async setItemsPerPage(nrOfItems: number) {\n    this.page = 1;\n    this.itemsPerPage = Number(nrOfItems);\n    await this.getAllInvoices();\n  }\n\n  isSelected = (row: Invoice): boolean => {\n    return !!this.selectedInvoices?.find((selected) => selected.id === row.id);\n  };\n\n  toggleSelect(row: Invoice): void {\n    if (this.isSelected(row)) {\n      this.selectedInvoices = this.selectedInvoices.filter(\n        (s) => s.id !== row.id\n      );\n    } else {\n      this.selectedInvoices.push(row);\n    }\n  }\n\n  toggleSelectAll() {\n    if (this.areAllSelected()) {\n      this.selectedInvoices = [];\n    } else {\n      this.selectedInvoices = this.invoicesList?.items || [];\n    }\n  }\n\n  areAllSelected(): boolean {\n    return this.selectedInvoices.length === this.invoicesList?.items.length;\n  }\n\n  async testDownload() {\n    try {\n      const template = this.form.value.templateString;\n      const res = await fetch(`${this.serverPath}/invoices/preview`, {\n        headers: {\n          ...this.getHeaders(),\n          'Content-Type': 'application/json',\n        },\n        method: 'POST',\n        body: JSON.stringify({ template }),\n      });\n      if (!res.ok) {\n        const json = await res.json();\n        throw Error(json?.message);\n      }\n      const blob = await res.blob();\n      await this.downloadBlob(blob, 'test-invoice.pdf', true);\n    } catch (err) {\n      console.error(err);\n      this.notificationService.error(err.message);\n    }\n  }\n\n  private getHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n    const channelToken = this.localStorageService.get('activeChannelToken');\n    if (channelToken) {\n      headers['vendure-token'] = channelToken;\n    }\n    const authToken = this.localStorageService.get('authToken');\n    if (authToken) {\n      headers.authorization = `Bearer ${authToken}`;\n    }\n    return headers;\n  }\n\n  private async downloadBlob(\n    blob: Blob,\n    fileName: string,\n    openInNewTab = false\n  ): Promise<void> {\n    const blobUrl = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.setAttribute('hidden', 'true');\n    a.href = blobUrl;\n    if (!openInNewTab) {\n      a.download = fileName;\n    }\n    a.setAttribute('target', '_blank');\n    a.click();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\nimport { InvoicesComponent } from './invoices.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: InvoicesComponent,\n        data: { breadcrumb: 'Invoices' },\n      },\n    ]),\n  ],\n  providers: [],\n  declarations: [InvoicesComponent],\n})\nexport class InvoicesModule {}\n"]}